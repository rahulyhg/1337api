<?php
use \Firebase\JWT\JWT;

/* ***************************************************************************************************
** AUTH INIT *****************************************************************************************
*************************************************************************************************** */ 

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
	$req['content'] = json_decode(file_get_contents("php://input"),true);
	api_signin($req, $config);
} else{
	api_forbid();
};

/* ***************************************************************************************************
** AUTH SIGNIN FUNCTIONS *****************************************************************************
*************************************************************************************************** */ 

function api_signin($req, $config){
	global $caption;

	// VALIDATE CREDENTIALS
	$userCredentials = array(
		'email' => $req['content']['email'],
		'password' => md5($req['content']['password']),
	);

	$user = R::findOne('user', 'email = :email and password = :password and active = true', $userCredentials );

	// IF USER EXISTS
	if(!empty($user)){

		$tokenId    = base64_encode(mcrypt_create_iv(32));
		$issuedAt   = strtotime(R::isoDateTime());
		$notBefore  = $issuedAt; 					// Instant
		$expire     = $notBefore + 3600; 			// Adding 3600 seconds
		$serverName = $config['auth']['jwtIssuer']; // Retrieve the server name from config file
	
		// create the token as an array
		$data = [
			'iat'  => $issuedAt, 					// Issued at: time when the token was generated
			'jti'  => $tokenId, 					// Json Token Id: an unique identifier for the token
			'iss'  => $serverName, 					// Issuer
			'nbf'  => $notBefore, 					// Not before
			'exp'  => $expire, 						// Expire
			'data' => [ 							// Data related to the signer user from the users table
				'id'   	=> $user['id'],
				'name' 	=> $user['name'],
				'email' => $userCredentials['email'],
			]
		];

		// extract the secret key from the config file. 
		// the key is generated by using: base64_encode(openssl_random_pseudo_bytes(64));
		$secretKey = base64_decode($config['auth']['jwtKey']);
	
		// encode the array to a JWT string.
		// the output string can be validated at http://jwt.io/
		$jwt = JWT::encode(
			$data, 		// Data to be encoded in the JWT
			$secretKey, // The signing key
			'HS512' 	// Algorithm used to sign the token, see https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#section-3
		);

		$unencodedArray = ['jwt' => $jwt];
 		$res['token'] = $jwt;
	}

	// IF USER DOES NOT EXISTS
	else {
		api_forbid($caption['messages']['AUTH_USERPASS_FAIL']);
		exit();
	}	

	// OUTPUT
	api_output($res);

};

?>